import streamlit as st
import pandas as pd
import numpy as np
import requests
import io
from datetime import datetime
import plotly.express as px
from statsmodels.tsa.statespace.sarimax import SARIMAX
import statsmodels.api as sm

st.set_page_config(layout="wide", page_title="–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –£–∫—Ä–∞—ó–Ω–∏")

st.title("–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –£–∫—Ä–∞—ó–Ω–∏ üá∫üá¶")
st.markdown(
    "–ö–æ—Ä–æ—Ç–∫–æ: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥–∞–Ω—ñ (World Bank / –¥–µ—Ä–∂–∞–≤–Ω—ñ API), –±—É–¥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏, –∫–æ—Ä–µ–ª—è—Ü—ñ—ó —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º—ñ—Å—è—Ü—ñ–≤."
)

# ---------------------------
# Helper: World Bank API fetch
# ---------------------------
WB_BASE = "https://api.worldbank.org/v2/country/UA/indicator/{indicator}?format=json&per_page=1000"

INDICATORS = {
    "GDP (current US$)": "NY.GDP.MKTP.CD",
    "Inflation (CPI, annual %)": "FP.CPI.TOTL.ZG",
    "Unemployment rate (% of labor force)": "SL.UEM.TOTL.ZS",
}

@st.cache_data(show_spinner=False)
def fetch_wb_series(indicator_code):
    url = WB_BASE.format(indicator=indicator_code)
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    # data[1] contains observations
    if len(data) < 2 or not data[1]:
        return pd.DataFrame(columns=["date", "value"])
    records = []
    for item in data[1]:
        year = item.get('date')
        val = item.get('value')
        if val is not None:
            try:
                records.append({"date": pd.to_datetime(f"{year}-01-01"), "value": float(val)})
            except Exception:
                continue
    df = pd.DataFrame(records).sort_values('date').reset_index(drop=True)
    return df

# Sidebar controls
st.sidebar.header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
indicators_selected = st.sidebar.multiselect("–ü–æ–∫–∞–∑–Ω–∏–∫–∏ (–¥–∂–µ—Ä–µ–ª–æ: World Bank)", list(INDICATORS.keys()), default=list(INDICATORS.keys()))
start_year = st.sidebar.number_input("–†—ñ–∫ –ø–æ—á–∞—Ç–∫—É:", min_value=1960, max_value=datetime.now().year, value=2000, step=1)
show_interpolated = st.sidebar.checkbox("–Ü–Ω—Ç–µ—Ä–ø–æ–ª—é–≤–∞—Ç–∏ –¥–æ –º—ñ—Å—è—Ü—ñ–≤ (—â–æ–± –¥–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑, 6 –º—ñ—Å—è—Ü—ñ–≤)", value=True)

# Fetch data
series_dfs = {}
for name in indicators_selected:
    code = INDICATORS[name]
    df = fetch_wb_series(code)
    if not df.empty:
        df = df[df['date'].dt.year >= int(start_year)].copy()
    series_dfs[name] = df

# Show data availability
st.subheader("–î–∂–µ—Ä–µ–ª–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–æ–≤—ñ —Ä—è–¥–∏")
col1, col2 = st.columns([2,1])
with col1:
    for name, df in series_dfs.items():
        if df.empty:
            st.warning(f"{name}: –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")
        else:
            st.write(f"**{name}** ‚Äî –ø–µ—Ä—ñ–æ–¥: {df['date'].dt.year.min()} ‚Äî {df['date'].dt.year.max()} ({len(df)} –∑–∞–ø–∏—Å—ñ–≤)")
with col2:
    if st.button("–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ", use_container_width=True):
        st.cache_data.clear()
        st.experimental_rerun()

# Prepare monthly series if asked
monthly = {}
for name, df in series_dfs.items():
    if df.empty:
        monthly[name] = pd.Series(dtype=float)
        continue
    df = df.set_index('date').sort_index()
    # convert yearly to monthly by forward/backward fill or linear interpolation
    if show_interpolated:
        idx = pd.date_range(start=df.index.min(), end=df.index.max(), freq='MS')
        s = df['value'].reindex(pd.to_datetime(df.index)).sort_index()
        s_monthly = s.resample('YS').first() if False else s  # keep as-is
        # create monthly series by linear interpolation on year values
        yearly = df['value']
        yearly.index = pd.DatetimeIndex([pd.Timestamp(f'{d.year}-01-01') for d in yearly.index])
        monthly_index = pd.date_range(yearly.index.min(), yearly.index.max(), freq='MS')
        monthly_series = yearly.reindex(monthly_index, method=None)
        monthly_series = monthly_series.interpolate(method='linear')
        monthly[name] = monthly_series
    else:
        monthly[name] = df['value']

# Plot interactive charts
st.subheader("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏")
chart_col1, chart_col2 = st.columns(2)
with chart_col1:
    sel = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ (–ª—ñ–≤–∞ –ø–∞–Ω–µ–ª—å)", indicators_selected, index=0)
    s = monthly.get(sel, pd.Series())
    if s.empty:
        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    else:
        fig = px.line(x=s.index, y=s.values, labels={'x':'–î–∞—Ç–∞', 'y':sel}, title=sel)
        st.plotly_chart(fig, use_container_width=True)
with chart_col2:
    sel2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ (–ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å)", indicators_selected, index=min(1, max(0, len(indicators_selected)-1)))
    s2 = monthly.get(sel2, pd.Series())
    if s2.empty:
        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    else:
        fig2 = px.line(x=s2.index, y=s2.values, labels={'x':'–î–∞—Ç–∞', 'y':sel2}, title=sel2)
        st.plotly_chart(fig2, use_container_width=True)

# Correlations
st.subheader("–ö–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏")
# build DataFrame with aligned indices
aligned = pd.DataFrame()
for name, s in monthly.items():
    if s.empty:
        continue
    aligned[name] = s
aligned = aligned.dropna()
if aligned.empty or aligned.shape[1] < 2:
    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó")
else:
    corr = aligned.corr()
    st.write("–ú–∞—Ç—Ä–∏—Ü—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π (–ü—ñ—Ä—Å–æ–Ω):")
    st.dataframe(corr.style.format(precision=3))
    heatmap_fig = px.imshow(corr.values, x=corr.columns, y=corr.index, text_auto='.3f', title='–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è')
    st.plotly_chart(heatmap_fig, use_container_width=True)

# Forecasting: simple SARIMAX per series
st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º—ñ—Å—è—Ü—ñ–≤")
forecast_col1, forecast_col2 = st.columns([2,1])
with forecast_col1:
    to_forecast = st.selectbox("–Ø–∫–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏?", indicators_selected)
    s = monthly.get(to_forecast, pd.Series())
    if s.empty or len(s.dropna()) < 12:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ ~12 –º—ñ—Å—è—á–Ω–∏—Ö —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å). –ü—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –∞–±–æ –∑–Ω—ñ–º—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—é.")
    else:
        # fit SARIMAX (simple defaults) on the series
        y = s.dropna()
        try:
            model = SARIMAX(y, order=(1,1,1), seasonal_order=(0,0,0,0), enforce_stationarity=False, enforce_invertibility=False)
            res = model.fit(disp=False)
            pred = res.get_forecast(steps=6)
            pred_mean = pred.predicted_mean
            pred_ci = pred.conf_int()

            # plot
            figf = px.line()
            figf.add_scatter(x=y.index, y=y.values, mode='lines', name='–Ü—Å—Ç–æ—Ä—ñ—è')
            figf.add_scatter(x=pred_mean.index, y=pred_mean.values, mode='lines', name='–ü—Ä–æ–≥–Ω–æ–∑ (6 –º—ñ—Å.)')
            figf.update_layout(title=f'–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {to_forecast} –Ω–∞ 6 –º—ñ—Å—è—Ü—ñ–≤')
            st.plotly_chart(figf, use_container_width=True)

            st.write("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:")
            df_pred = pd.DataFrame({"date": pred_mean.index, "forecast": pred_mean.values})
            st.dataframe(df_pred.set_index('date').round(3))

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ: {e}")

with forecast_col2:
    if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV (—É—Å—ñ —Å–µ—Ä—ñ—ó)"):
        # prepare combined CSV from original yearly + interpolated monthly
        out = io.StringIO()
        combined = pd.DataFrame()
        for name, s in monthly.items():
            combined[name] = s
        combined.to_csv(out)
        st.download_button("Download CSV", data=out.getvalue().encode('utf-8'), file_name='ukraine_econ_series.csv', mime='text/csv')

# Help / how to run
st.markdown("---")
st.header("–Ø–∫ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ (—à–≤–∏–¥–∫–æ)")
st.markdown(
    "1. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞ GitHub —ñ –¥–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ñ–∞–π–ª `ukraine_economic_dashboard.py` –≤ –∫–æ—Ä—ñ–Ω—å.\n"
    "2. –î–æ–¥–∞–π—Ç–µ `requirements.txt` –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (streamlit, pandas, numpy, requests, plotly, statsmodels).\n"
    "3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ: `pip install -r requirements.txt` -> `streamlit run ukraine_economic_dashboard.py`.\n"
    "4. –î–ª—è –∫—Ä–∞—â–∏—Ö (—â–æ–º—ñ—Å—è—á–Ω–∏—Ö) –¥–∞–Ω–∏—Ö –º–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ TradingEconomics (–º–∞—î API key) –∞–±–æ –¥–µ—Ä–∂–∞–≤–Ω—ñ SDMX API ‚Äî —è –¥–æ–±–∞–≤–∏–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ —É —á–∞—Ç—ñ."
)

st.write("–ì–æ—Ç–æ–≤–æ ‚Äî —è–∫—â–æ —Ö–æ—á–µ—Ç–µ, –º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ `requirements.txt` —ñ `README.md` —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è GitHub Actions / Streamlit Community Cloud.")

# Footer
st.caption("–ü–æ–±—É–¥–æ–≤–∞–Ω–æ –∑ –¥–∞–Ω–∏–º–∏ World Bank (Indicators API). –î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó / —á–∞—Å—Ç—ñ—à–æ—ó (—â–æ–º—ñ—Å—è—á–Ω–æ—ó) —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ TradingEconomics –∞–±–æ –¥–µ—Ä–∂–∞–≤–Ω—ñ SDMX API.")
