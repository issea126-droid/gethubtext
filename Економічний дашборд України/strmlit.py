import streamlit as st
import pandas as pd
import numpy as np
import requests
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(layout="wide", page_title="–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –£–∫—Ä–∞—ó–Ω–∏")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ World Bank ---
@st.cache_data(ttl=3600)
def fetch_wb_indicator(country="UKR", indicator="NY.GDP.MKTP.CD", per_page=1000):
    url = f"https://api.worldbank.org/v2/country/{country}/indicator/{indicator}?format=json&per_page={per_page}"
    r = requests.get(url, timeout=20)
    if r.status_code != 200:
        return pd.DataFrame(columns=["date", "value"])
    data = r.json()
    if not isinstance(data, list) or len(data) < 2:
        return pd.DataFrame(columns=["date", "value"])
    records = data[1]
    rows = []
    for rec in records:
        year = rec.get("date")
        val = rec.get("value")
        if val is not None:
            rows.append({"date": int(year), "value": float(val)})
    df = pd.DataFrame(rows).sort_values("date")
    return df

# --- –ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ---
INDICATORS = {
    "–í–í–ü (current US$)": "NY.GDP.MKTP.CD",
    "–Ü–Ω—Ñ–ª—è—Ü—ñ—è (annual %)": "FP.CPI.TOTL.ZG",
    "–ë–µ–∑—Ä–æ–±—ñ—Ç—Ç—è (%)": "SL.UEM.TOTL.ZS"
}

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üìä –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –£–∫—Ä–∞—ó–Ω–∏")
st.write("–î–∞–Ω—ñ –∑ World Bank API: —ñ–Ω—Ñ–ª—è—Ü—ñ—è, –í–í–ü, –±–µ–∑—Ä–æ–±—ñ—Ç—Ç—è. –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤, –∫–æ—Ä–µ–ª—è—Ü—ñ–π, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –ø–µ—Ä—ñ–æ–¥—ñ–≤.")

# --- –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è ---
with st.sidebar:
    years_back = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É", 5, 40, 20)
    forecast_periods = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤ (—Ä–æ–∫—ñ–≤)", 1, 10, 6)
    indicator_to_forecast = st.selectbox("–ü–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É", list(INDICATORS.keys()))
    show_corr = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—é", True)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
dfs = {}
min_year = datetime.now().year - years_back
for name, code in INDICATORS.items():
    df = fetch_wb_indicator(indicator=code)
    df = df[df["date"] >= min_year]
    dfs[name] = df.reset_index(drop=True)

# --- –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—é ---
years = sorted({y for df in dfs.values() for y in df["date"]})
combined = pd.DataFrame({"–†—ñ–∫": years})
for name, df in dfs.items():
    combined = combined.merge(df.rename(columns={"value": name, "date": "–†—ñ–∫"}), on="–†—ñ–∫", how="left")

st.subheader("üìã –¢–∞–±–ª–∏—Ü—è –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
st.dataframe(combined)

# --- –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ---
st.subheader("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
chosen = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏", list(INDICATORS.keys()), default=list(INDICATORS.keys()))
if chosen:
    fig, ax = plt.subplots()
    for c in chosen:
        ax.plot(combined["–†—ñ–∫"], combined[c], marker="o", label=c)
    ax.legend()
    ax.set_xlabel("–†—ñ–∫")
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
    ax.set_title("–î–∏–Ω–∞–º—ñ–∫–∞ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏")
    st.pyplot(fig)
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞.")

# --- –ö–æ—Ä–µ–ª—è—Ü—ñ—è ---
if show_corr:
    st.subheader("üìä –ö–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏")
    corr = combined.drop(columns=["–†—ñ–∫"]).corr(method="pearson")
    st.dataframe(corr.style.format("{:.3f}"))

# --- –ü—Ä–æ–≥–Ω–æ–∑ ---
st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞")
df = dfs[indicator_to_forecast].dropna()
if len(df) < 5:
    st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.")
else:
    y = df["value"].values
    years = df["date"].values

    try:
        model = SARIMAX(y, order=(1,1,1), seasonal_order=(0,0,0,0))
        res = model.fit(disp=False)
        forecast = res.get_forecast(steps=forecast_periods)
        pred = forecast.predicted_mean
        ci = forecast.conf_int()

        future_years = np.arange(years[-1] + 1, years[-1] + 1 + forecast_periods)

        fig, ax = plt.subplots()
        ax.plot(years, y, marker="o", label="–Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ")
        ax.plot(future_years, pred, marker="o", color="red", label="–ü—Ä–æ–≥–Ω–æ–∑")
        ax.fill_between(future_years, ci.iloc[:, 0], ci.iloc[:, 1], color="pink", alpha=0.3)
        ax.legend()
        ax.set_xlabel("–†—ñ–∫")
        ax.set_title(f"–ü—Ä–æ–≥–Ω–æ–∑: {indicator_to_forecast}")
        st.pyplot(fig)

        forecast_df = pd.DataFrame({
            "–†—ñ–∫": future_years,
            "–ü—Ä–æ–≥–Ω–æ–∑": pred,
            "–ù–∏–∂–Ω—è –º–µ–∂–∞": ci.iloc[:, 0],
            "–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞": ci.iloc[:, 1]
        })
        st.dataframe(forecast_df.style.format("{:.2f}"))
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")

# --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
st.markdown("---")
st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", combined.to_csv(index=False), "econ_data.csv")
